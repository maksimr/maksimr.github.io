{"version":3,"sources":["markdown/links.cljc"],"mappings":"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","names":["markdown.links/href","text","link","state","vec__9025","cljs.core.nth","title","cljs.core/split-with","cljs.core.partial","cljs.core/not=","markdown.common.freeze_string","cljs.core/seq","cljs.core/not-empty","cljs.core.apply","cljs.core/str","clojure.string.join","cljs.core/rest","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","markdown.links/img","p__9045","vec__9046","seq9040","G__9041","cljs.core/first","cljs.core/next","G__9042","G__9043","self__4851__auto__","alt","url","markdown.links/handle-img-link","xs","cljs.core._EQ_","cljs.core.take","vec__9050","vec__9053","vec__9056","vec__9059","cljs.core.drop","xy","url-title","zy","new-text","new-state","markdown.links.img","cljs.core.concat","markdown.links/process-link-title","p1__9065#","p2__9064#","cljs.core.reduce","markdown.common/italics","markdown.common/em","markdown.common/strong","markdown.common/bold","markdown.common/strikethrough","markdown.links/make-link","img?","p__9066","map__9067","cljs.core/--destructure-map","cljs.core.get","code","codeblock","or__4253__auto__","out","tokens","loop-state","cljs.core/empty?","vec__9093","vec__9096","vec__9099","vec__9102","vec__9105","head","ys","dud","zs","tail","cljs.core/count","cljs.core/not","cljs.core.not_EQ_","cljs.core/last","vec__9113","link-text","new-loop-state","and__4251__auto__","vec__9119","vec__9122","img-text","cljs.core/butlast","markdown.links/link","markdown.links/image","markdown.links/reference","cljs.core/re-find","markdown.links/parse-reference","reference","start","cljs.core.subs","clojure.string/trim","clojure.string.split","markdown.links/parse-reference-link","line","references","trimmed","temp__5753__auto__","cljs.core.swap_BANG_","cljs.core/assoc","markdown.links/replace-reference-link","vec__9125","vec__9128","id","markdown.links/encode-links","links","i","cljs.core/second","p__9135","vec__9137","encoded","cljs.core.assoc","markdown.common/gen-token","markdown.links/parse-links","cljs.core.into","cljs.core.map","p__9142","vec__9144","k","v","markdown.links/freeze-links","cljs.core/re-seq","encoded-links","cljs.core.fnil","p__9150","vec__9151","s","clojure.string/replace","cljs.core.update","cljs.core/merge","p__9154","map__9155","markdown.links/reference-link","markdown.links/implicit-reference-link","replacement-text","markdown.links/footnote","markdown.links/parse-footnote-link","footnotes","cljs.core/assoc-in","markdown.links/replace-footnote-link","footnote","next-fn-id","p__9164","map__9165","markdown.links/replace-all-footnote-links","matcher","match","next-text","clojure.string/replace-first","next-state","cljs.core.update_in","cljs.core/inc","cljs.core.get_in","p__9167","map__9168","markdown.links/footnote-link","vec__9169","markdown.links/make-image-reference","src","title-text","p__9177","map__9178","markdown.links/image-reference-link","matches","cljs.core.distinct","ms","vec__9184","m","ref","refval","im"],"sourcesContent":["(ns markdown.links\n  (:require [clojure.string :as string]\n            [markdown.common\n             :refer\n             [freeze-string\n              gen-token\n              strong\n              bold\n              em\n              italics\n              strikethrough]]))\n\n(defn href [text link state]\n  (let [[link title] (split-with (partial not= \\space) link)]\n    (freeze-string\n     (seq \"<a href='\") link (seq \"'\")\n     (if (not-empty title)\n       (seq (apply str \" title=\" (string/join (rest title)) \">\"))\n       (seq \">\"))\n     text (seq \"</a>\") state)))\n\n(defn img [alt url state & [title]]\n  (freeze-string\n    (seq \"<img src=\\\"\") url (seq \"\\\" alt=\\\"\") alt\n    (if (not-empty title)\n      (seq (apply str \"\\\" title=\" (string/join title) \" />\"))\n      (seq \"\\\" />\"))\n    state))\n\n(defn handle-img-link [xs state]\n  (if (= [\\[ \\! \\[] (take 3 xs))\n    (let [xs (drop 3 xs)\n          [alt xy] (split-with (partial not= \\]) xs)\n          [url-title zy] (->> xy (drop 2) (split-with (partial not= \\))))\n          [url title] (split-with (partial not= \\space) url-title)\n          [new-text new-state] (img alt url state (not-empty title))]\n      [(concat \"[\" new-text (rest zy)) new-state])\n    [xs state]))\n\n(defn process-link-title [title state]\n  (first\n    (reduce\n      #(apply %2 %1)\n      [title state]\n      [italics em strong bold strikethrough])))\n\n(defn make-link\n  [img?]\n  (fn link [text {:keys [code codeblock] :as state}]\n    (if (or code codeblock)\n      [text state]\n      (loop [out []\n             tokens (seq text)\n             loop-state state]\n        (if (empty? tokens)\n          [(string/join out) loop-state]\n          (let [[head xs] (split-with (partial not= \\[) tokens)\n                ;; Overwriting the loop-state here\n                [xs loop-state] (handle-img-link xs loop-state)\n                [title ys] (split-with (partial not= \\]) xs)\n                [dud zs] (split-with (partial not= \\() ys)\n                [link tail] (split-with (partial not= \\)) zs)]\n\n            (cond\n              ;; Skip invalid tags and continue\n              (or (< (count tail) 1) ;; nothing after closing parens, i.e. no link/image found\n                  (< (count link) 2) ;; empty link contents, e.g. [missing link]()\n                  (> (count dud) 1)) ;; content between ] and ( means not a link/image\n              (recur (concat out head title) (concat dud link tail) loop-state)\n              \n              ;; Process Link if needed\n              (and (not img?) (not= (last head) \\!))\n              (let [[link-text new-loop-state] (href\n                                                (rest (process-link-title title state))\n                                                (rest link) loop-state)]\n                (recur (concat out head link-text) (rest tail) new-loop-state))\n              \n              ;; Process Image if needed\n              (and img? (= (last head) \\!))\n              (let [alt (rest title)\n                    [url title] (split-with (partial not= \\space) (rest link))\n                    title (process-link-title (string/join (rest title)) loop-state)\n                    ;; Now process / generate the img data\n                    [img-text new-loop-state] (img alt url loop-state title)]\n                (recur (concat out (butlast head) img-text) (rest tail) new-loop-state))\n              \n              ;; Otherwise skip link and continue\n              :else (recur (concat out head title dud link) tail loop-state))))))))\n\n(def link (make-link false))\n(def image (make-link true))\n\n(defn reference [text]\n  (re-find #\"^\\[[a-zA-Z0-9 \\-_\\.]+\\]:\" text))\n\n(defn parse-reference [reference start]\n  (-> reference\n      (subs start)\n      (string/trim)\n      (string/split #\"\\s+\" 2)))\n\n(defn parse-reference-link [line references]\n  (let [trimmed (string/trim line)]\n    (when-let [link (reference trimmed)]\n      (swap! references assoc (subs link 0 (dec (count link)))\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-reference-link [references reference]\n  (let [[title id] (string/split reference #\"\\]\\s*\" 2)\n        [link alt] (get references id)]\n    (str \"<a href='\" link \"'\" (when alt (str \" title='\" (subs alt 1 (dec (count alt))) \"'\")) \">\" (subs title 1) \"</a>\")))\n\n(defn encode-links [links i]\n  (second\n    (reduce\n      (fn [[i encoded] link]\n        [(inc i) (assoc encoded (gen-token i) link)])\n      [i {}]\n      links)))\n\n(defn parse-links [references links]\n  (into {} (map\n             (fn [[k v]]\n               [k (replace-reference-link references v)])\n             links)))\n\n(defn freeze-links [references text state]\n  (let [links\n        (re-seq\n          #\"\\[[^\\]]+\\]\\s*\\[[a-zA-Z0-9 \\-_\\.]+\\]\"\n          text)\n        encoded-links\n        (encode-links links ((fnil count []) (:frozen-strings state)))]\n    [(reduce\n       (fn [s [id link]]\n         (string/replace s link id))\n       text encoded-links)\n     (update state :frozen-strings merge (parse-links references encoded-links))]))\n\n(defn reference-link [text {:keys [code codeblock references] :as state}]\n  (cond\n    (or (nil? references) code codeblock)\n    [text state]\n\n    (reference (string/trim text))\n    [\"\" state]\n\n    :else\n    (freeze-links references text state)))\n\n(defn implicit-reference-link [text state]\n  (let [replacement-text (string/replace text #\"\\[([^\\]]+)\\]\\[\\]\" \"[$1][$1]\")]\n    [replacement-text state]))\n\n(defn footnote [text]\n  (re-find #\"^\\[\\^[a-zA-Z0-9_-]+\\]:\" text))\n\n(defn parse-footnote-link [line footnotes]\n  (let [trimmed (string/trim line)]\n    (when-let [link (footnote trimmed)]\n      (swap! footnotes assoc-in [:unprocessed (subs link 0 (dec (count link)))]\n             (parse-reference trimmed (inc (count link)))))))\n\n(defn replace-footnote-link [footnotes footnote]\n  (let [next-fn-id (:next-fn-id footnotes)\n        link (str \"#fn-\" next-fn-id)]\n    (str \"<a href='\" link \"' id='fnref\" next-fn-id \"'><sup>\" next-fn-id \"</sup></a>\")))\n\n(defn replace-all-footnote-links [text {:keys [footnotes] :as state}]\n  (let [matcher #\"\\[\\^[a-zA-Z0-9_-]+\\]\"\n        match (re-find matcher text)]\n    (if (nil? match)\n      [text state]\n      (let [next-text (string/replace-first text matcher (partial replace-footnote-link footnotes))\n            next-state (-> state\n                           (update-in [:footnotes :next-fn-id] inc)\n                           (assoc-in [:footnotes :processed (get-in state [:footnotes :next-fn-id])]\n                                     (get-in state [:footnotes :unprocessed match])))]\n        (recur next-text next-state)))))\n\n(defn footnote-link [text {:keys [code codeblock footnotes] :as state}]\n  (cond\n    (or (nil? (:unprocessed footnotes)) code codeblock)\n    [text state]\n\n    (footnote (string/trim text))\n    [\"\" state]\n\n    :else\n    (let [[text state] (replace-all-footnote-links text state)]\n      [text state])))\n\n(defn make-image-reference [src alt title]\n  (let [title-text (str (if title (str \"\\\" title=\" (string/join title) \"\") \"\\\"\"))]\n    (str \"<img src=\\\"\" src \"\\\" alt=\\\"\" alt title-text \" />\")))\n\n(defn image-reference-link [text {:keys [references] :as state}]\n  (if (or (not (:reference-links? state)) (empty? references))\n    [text state]\n    (let [matcher #\"!\\[([^\\]]+)\\]\\s*(\\[[a-zA-Z0-9 ]+\\])\"\n          matches (distinct (re-seq matcher text))]\n      (loop [ms matches\n             new-text text]\n        (if (seq ms)\n          (let [[m alt ref] (first ms)\n                refval (get references ref)\n                im (make-image-reference (first refval) alt (second refval))]\n            (recur (rest ms) (string/replace new-text m im)))\n          [new-text state])))))\n"]}