{"version":3,"sources":["client/core.cljs"],"mappings":";AAQA,AAAKA,uBACH,AAACC,4CAAI,WAAKC;AAAL,AAAA,kDAAA,qDAAA,4HAAA,/HACOA,yDACG,0DAAA,QAAA,lEAACC,uBAAe,0BAAA,IAAA,9BAACA,uBAAeD,2EAClC,CAAA,qDAAcA;GACzB,mFAAA;AAEJ,4BAAA,5BAAME,gEAAeC;AAArB,OACM,AAACC,MAASD,bACZ,uBAAA,WAAAE;AAAA,AAAQ,OAAAA;;;AAEZ,gCAAA,hCAAMC,wEAAmBN;AAAzB,AACE,qEAAA,jBAAKO,iEAAuBP;;AAE9B,uBAAA,vBAAMQ,sDAAUC;AAAhB,AAAA,0FAAA,mDAAA,2CAAA,2FAAA,2CAAA,wDAC2CA;;AAE3C,+BAAA,/BAAMC,sEAAkBC;AAAxB,AACE,IAAMC,QAAM,gDAAA,hDAACC;AAAb,AACE;AAAA,AACE,IAAMC,QAAM,AAAA,oFAAQH;IACdR,MAAI,AAACG,8BAAkB,AAAA,gFAAKK;AADlC,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,mFAAA,gDAAA,2CAAA,uFAAA,lCAGmBR,YAAKW,yGACpBN,qBAAS,0BAAA,AAAAO,1BAACC,0CAAUJ;;;AAE9B,2BAAA,3BAAMK;AAAN,AAAA,0FAAA,mDACQ,AAAClB,4CACC,WAAKmB;AAAL,AAAA,2BAAA,2HAAA,2CAAA,oDACSA,vIAAKR,6BAAiBQ;GAAKpB;;AAE9C,0BAAA,1BAAMqB,4DAAaR;AAAnB,AACE,IAAMC,QAAM,gDAAA,hDAACC;AAAb,AACM,AAACX,0BAAc,AAAA,iFAAMS,3GACvB,0HAAA,WAAAS;AAAA,AAAQ,mCAAA,2CAAA,vEAACC,sBAAOT,uGAAa,0BAAAQ,1BAACJ;;;AAChC;AAAA,AACE,oBAAM,AAAA,oFAAA,AAAAD,gBAAQH;AAAd,AAAA,0FAAA,mDAAA,mFACSJ,qBAAS,AAAA,oFAAA,AAAAO,gBAAQH;;AAD1B;;;;AAGN,sBAAA,tBAAMU;AAAN,AACE,IAAMtB,KAAG,sBAAA,tBAAQuB;IACXZ,UAAQ,sBAAA,JAAMX,IAAG,AAACwB,gBAAM,+CAAA,WAAAC,1DAACC;AAAD,AAAS,OAACC,6CAAE3B,GAAG,AAAA,gFAAAyB;0BAA/B,vBAAwC3B;AADtD,AAEE,oBAAIa;AAAJ,0FACGQ,wBAAYR;;AADf,0FAEGM;;;AAEP,oBAAA,pBAAMW;AAAN,AACE,IAAMC,WAAS,wBAAA,xBAACC;AAAhB,AACE,wDAAA,jDAACC,oIAAaT,4BAASO;;AAE3B,AAACD","names":["client.core/articles","cljs.core.map","id","clojure.string/replace","client.core/fetch-article","uri","js/fetch","p1__10400#","client.core/build-article-url","js/location.origin","client.core/html-elm","html","client.core/article-item-elm","article","state","reagent.core.atom","title","cljs.core/deref","markdown.core/md->html","client.core/articles-elm","it","client.core/article-elm","p1__10401#","cljs.core/reset!","client.core/app-elm","js/location.search","cljs.core/first","p1__10402#","cljs.core.filter","cljs.core._EQ_","client.core/-main","app-node","js/document.getElementById","reagent.dom.render"],"sourcesContent":["(ns client.core\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n   [markdown.core :refer [md->html]]\n   [clojure.string :as string]\n   [client.docs :as docs]))\n\n(def articles\n  (map (fn [id]\n         {:id id\n          :title (string/replace (string/replace id #\"_\" \" \") #\"\\.md$\" \"\")\n          :uri (str \"/docs/\" id)})\n    (docs/read-articles \"./public/docs\")))\n\n(defn fetch-article [uri]\n  (-> (js/fetch uri)\n    (.then #(.text %))))\n\n(defn build-article-url [id]\n  (str js/location.origin \"?\" id))\n\n(defn html-elm [html]\n  [:div {:dangerouslySetInnerHTML {:__html html}}])\n\n(defn article-item-elm [article]\n  (let [state (r/atom nil)]\n    (fn []\n      (let [title (:title article)\n            uri (build-article-url (:id article))]\n        [:div\n         [:h1 [:a {:href uri} title]]\n         [html-elm (md->html @state)]]))))\n\n(defn articles-elm []\n  [:div (map\n          (fn [it]\n            ^{:key it} [article-item-elm it]) articles)])\n\n(defn article-elm [article]\n  (let [state (r/atom {})]\n    (-> (fetch-article (:uri article))\n      (.then #(reset! state {:text (md->html %)})))\n    (fn []\n      (when (:text @state)\n        [:div [html-elm (:text @state)]]))))\n\n(defn app-elm []\n  (let [id (.slice js/location.search 1)\n        article (when id (first (filter #(= id (:id %)) articles)))]\n    (if article\n      [article-elm article]\n      [articles-elm])))\n\n(defn -main []\n  (let [app-node (js/document.getElementById \"app\")]\n    (rdom/render [app-elm] app-node)))\n\n(-main)"]}