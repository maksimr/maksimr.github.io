{"version":3,"sources":["client/core.cljs"],"mappings":";AAOA,AAAKA,uBACH,4CAAA,WAAAC,vDAACC;AAAD,AAAM,QAAA,qDAAAD;GACJ,mFAAA;AAEJ,4BAAA,5BAAME,gEAAeC;AAArB,OACM,AAACC,MAASD,bACZ,uBAAA,WAAAE;AAAA,AAAQ,OAAAA;;;AAEZ,uBAAA,vBAAMC,sDAAUC;AAAhB,AAAA,0FAAA,mDAAA,2CAAA,2FAAA,2CAAA,wDAC2CA;;AAE3C,0BAAA,1BAAMC,4DAAaC;AAAnB,AACE,IAAMC,QAAM,gDAAA,hDAACC;AAAb,AACE;AAAA,AACE,IAAMC,QAAM,AAACC,eAAK,WAAA,XAAQJ;IACpBK,eAAa,WAAKC;AAAL,AACE,AAAiBA;;OAEf,AAACb,0BAAcO,jCACf,4CAAO,WAAKO;AAAL,AACE,OAACC,sBAAOP,MAAMM;;;AAN9C,AAAA,0FAAA,mDAAA,mFAAA,kDAAA,mFAAA,gDAAA,2CAAA,0DAAA,wGAAA,7GAQmBP,kEACIK,qBAAcF,yGACjCN,qBAAS,0BAAA,AAAAY,1BAACC,0CAAUT;;;AAE9B,sBAAA,tBAAMU;AAAN,AAAA,0FAAA,mDACQ,AAACnB,4CACC,WAAKoB;AAAL,AAAA,2BAAA,sHAAA,2CAAA,oDACSA,lIAAKb,wBAAYa;GAAKtB;;AAEzC,oBAAA,pBAAMuB;AAAN,AACE,IAAMC,WAAS,wBAAA,xBAACC;AAAhB,AACE,wDAAA,jDAACC,oIAAaL,4BAASG;;AAE3B,AAACD","names":["client.core/articles","p1__10400#","cljs.core.map","client.core/fetch-article","uri","js/fetch","p1__10401#","client.core/html-elm","html","client.core/article-elm","path","state","reagent.core.atom","title","cljs.core/last","open-article","event","text","cljs.core/reset!","cljs.core/deref","markdown.core/md->html","client.core/app-elm","it","client.core/-main","app-node","js/document.getElementById","reagent.dom.render"],"sourcesContent":["(ns client.core\n  (:require\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n   [markdown.core :refer [md->html]]\n   [client.docs :as docs]))\n\n(def articles\n  (map #(str \"/docs/\" %)\n    (docs/read-articles \"./public/docs\")))\n\n(defn fetch-article [uri]\n  (-> (js/fetch uri)\n    (.then #(.text %))))\n\n(defn html-elm [html]\n  [:div {:dangerouslySetInnerHTML {:__html html}}])\n\n(defn article-elm [path]\n  (let [state (r/atom nil)]\n    (fn []\n      (let [title (last (.split path \"/\"))\n            open-article (fn [event]\n                           (.preventDefault event)\n                           (->\n                             (fetch-article path)\n                             (.then (fn [text]\n                                      (reset! state text)))))]\n        [:div\n         [:h1 [:a {:href path\n                   :on-click open-article} title]]\n         [html-elm (md->html @state)]]))))\n\n(defn app-elm []\n  [:div (map\n          (fn [it]\n            ^{:key it} [article-elm it]) articles)])\n\n(defn -main []\n  (let [app-node (js/document.getElementById \"app\")]\n    (rdom/render [app-elm] app-node)))\n\n(-main)"]}